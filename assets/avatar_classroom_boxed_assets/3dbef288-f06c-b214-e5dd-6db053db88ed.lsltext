// Sloodle configuration notecard reader
// Reads a configuration notecard and transmits the data via link messages to other scripts
// If the notecard changes, then it automatically resets.
//
// Part of the Sloodle project (www.sloodle.org)
// Copyright (c) 2007-8 Sloodle
// Released under the GNU GPL v3
//
// Contributors:
//  Edmund Edgar
//  Peter R. Bloomfield
integer TIME_LIMIT=60;
string CLASSROOM_NAME="Avatar Classroom Rev 107";
string TEMPLATE="dev";
string API_URL="http://api.avatarclassroom.com/api/api.php";
string AVATAR_CLASSROOM_PASSWORD="128sdfKiweriojs012";
integer TYPE_FLESH=4;
integer SLOODLE_CHANNEL_OBJECT_DIALOG = -3857343;
string SLOODLE_CONFIG_NOTECARD = "sloodle_config";
list HTTP_VARS= [HTTP_METHOD, "POST", HTTP_MIMETYPE, "application/x-www-form-urlencoded"];
string SLOODLE_EOF = "sloodleeof";

key sloodle_notecard_key = NULL_KEY;
integer sloodle_notecard_line = 0;
vector     RED            = <0.77278,0.04391,0.00000>;//RED
vector     ORANGE = <0.87130,0.41303,0.00000>;//orange
vector     YELLOW         = <0.82192,0.86066,0.00000>;//YELLOW
vector     GREEN         = <0.12616,0.77712,0.00000>;//GREEN
vector     BLUE        = <0.00000,0.05804,0.98688>;//BLUE
vector     PINK         = <0.83635,0.00000,0.88019>;//INDIGO
vector     PURPLE = <0.39257,0.00000,0.71612>;//PURPLE
vector     WHITE        = <1.000,1.000,1.000>;//WHITE
vector     BLACK        = <0.000,0.000,0.000>;//BLACKvector     ORANGE = <0.87130, 0.41303, 0.00000>;//orange

string COMMENT_PREFIX = "//";

key latestnotecard = NULL_KEY; // The most recently read notecard

string hoverText;
integer counter;

///// TRANSLATION /////

// Link message channels
integer SLOODLE_CHANNEL_TRANSLATION_REQUEST = -1928374651;
integer SLOODLE_CHANNEL_TRANSLATION_RESPONSE = -1928374652;

// Translation output methods
string SLOODLE_TRANSLATE_LINK = "link";             // No output parameters - simply returns the translation on SLOODLE_TRANSLATION_RESPONSE link message channel
string SLOODLE_TRANSLATE_SAY = "say";               // 1 output parameter: chat channel number
string SLOODLE_TRANSLATE_WHISPER = "whisper";       // 1 output parameter: chat channel number
string SLOODLE_TRANSLATE_SHOUT = "shout";           // 1 output parameter: chat channel number
string SLOODLE_TRANSLATE_REGION_SAY = "regionsay";  // 1 output parameter: chat channel number
string SLOODLE_TRANSLATE_OWNER_SAY = "ownersay";    // No output parameters
string SLOODLE_TRANSLATE_DIALOG = "dialog";         // Recipient avatar should be identified in link message keyval. At least 2 output parameters: first the channel number for the dialog, and then 1 to 12 button label strings.
string SLOODLE_TRANSLATE_LOAD_URL = "loadurl";      // Recipient avatar should be identified in link message keyval. 1 output parameter, containing the URL.
string SLOODLE_TRANSLATE_HOVER_TEXT = "hovertext";  // 2 output parameters: colour <r,g,b>, and alpha value
            


integer TYPE_NOT_FOUND_ERROR =  -20001;
integer INVALID_PASSWORD_ERROR = -20002;
integer LIST_SITES_NO_SITES_FOUND =  20101;
integer LIST_SITES_SITES_FOUND =  20102;
integer CREATE_SITE_OK =  20201;
integer CREATE_SITE_ALREADY_EXISTS =  -20202;
integer CREATE_SITE_FAILED =  -20203;
integer CREATE_SITE_SET_MOODLE_PASSWORD_FAILED =  -20204;
integer CREATE_SITE_INITIALIZE_PAYMENT_FAILED =  -20205;
integer DESTROY_SITE_OK =  20301;
integer DESTROY_SITE_FAILED =  -20302;
integer DESTROY_SITE_FAILED_SITE_NOT_FOUND =  -20303;
integer DESTROY_SITE_FAILED_OWNER_MISMATCH =  -20304;
integer DESTROY_SITE_MISSING_SITE_NAME =  -20305;
integer PSEUDO_NOTECARD_OK =  20401;
integer PSEUDO_NOTECARD_SITE_NOT_FOUND =  -20402;
integer PSEUDO_NOTECARD_FAILED =  -20403;
integer RECORD_PAYMENT_OK =  20501;
integer RECORD_PAYMENT_SITE_NOT_FOUND_BUT_RECORDED_ANYWAY =  -20502;
integer RECORD_PAYMENT_FAILED =  -20503;
list GENERAL_OPTIONS = ["Ok"];

// Send a translation request link message
sloodle_translation_request(string output_method, list output_params, string string_name, list string_params, key keyval, string batch)
{
    llMessageLinked(LINK_THIS, SLOODLE_CHANNEL_TRANSLATION_REQUEST, output_method + "|" + llList2CSV(output_params) + "|" + string_name + "|" + llList2CSV(string_params) + "|" + batch, keyval);
}

///// ----------- /////


///// FUNCTIONS /////


sloodle_tell_other_scripts(string msg)
{
    sloodle_debug("notecard sending message to other scripts: "+msg);
    llMessageLinked(LINK_SET, SLOODLE_CHANNEL_OBJECT_DIALOG, msg, NULL_KEY);   
}

sloodle_debug(string msg)
{
    //llWhisper(0,msg);
}
integer debugCheck(){
    if (llList2Integer(llGetPrimitiveParams([PRIM_MATERIAL]),0)==TYPE_FLESH){
        return TRUE;
    }
        else return FALSE;
    
}
debug(string str){
    if (llList2Integer(llGetPrimitiveParams([PRIM_MATERIAL]),0)==TYPE_FLESH){
        llOwnerSay(str);
    }
}
/***********************************************
*  random_integer()
*  |-->Produces a random integer
***********************************************/ 
integer random_integer( integer min, integer max ){
 return min + (integer)( llFrand( max - min + 1 ) );
}
string OWNER_INFO;
integer MENU_CHANNEL;
string sloodleserverroot;
key http_id;
key change_pass_id;
key create_id;
key confirm_id;
playSound(string str){
        if (llListFindList([20101,20102,20201,20301,-20002,-20202,-20203,-20302,-20303,-20304,-20305,-20402,-20403], [(integer)str])!=0);
        llTriggerSound(str, 1.0);
        if (str==(string)LIST_SITES_NO_SITES_FOUND) str = "Error: No avatar classrooms have been found on our server for the specified user.";
        if (str==(string)CREATE_SITE_OK) str = "Success: An Avatar classroom has successfully been created on our server.";
        if (str==(string)DESTROY_SITE_OK) str = "Success: We have successfully removed the Avatar Classroom on our server for the specified user.";
        if (str==(string)INVALID_PASSWORD_ERROR) str = "Error: Invalid password specified";
        if (str==(string)CREATE_SITE_ALREADY_EXISTS) str = "Error: Create Avatar Classroom Failed.  An Avatar Classroom already exists on our server for the specified user.";
        if (str==(string)CREATE_SITE_FAILED) str = "Error: Create Avatar Classroom Failed.";
        if (str==(string)DESTROY_SITE_FAILED) str = "Error: Destroy site failed.";
        if (str==(string)DESTROY_SITE_FAILED_SITE_NOT_FOUND) str = "Error: Destroy site failed, Avatar Classroom specified was not found on our";
        if (str==(string)DESTROY_SITE_FAILED_OWNER_MISMATCH) str = "Error: Destroy site failed, Avatar Classroom owner name mismatch.";
        if (str==(string)DESTROY_SITE_MISSING_SITE_NAME) str = "Error: Destroy site failed, Missing site name";
        if (str==(string)PSEUDO_NOTECARD_SITE_NOT_FOUND) str = "Error: Notecard site not found";
        if (str==(string)PSEUDO_NOTECARD_FAILED) str = "Error: Notecard failed";        
        //llDialog(llGetOwner(), str, ["ok"], -123);        
}
list sites;
 list siteBtns;
default
{
    on_rez(integer st){
        llResetScript();    
    }
    state_entry() {
        llSetText("", YELLOW, 1.0);
        llMessageLinked(LINK_SET, 1,"p0", NULL_KEY);
        MENU_CHANNEL=random_integer(-30000,-40000);
        llListen(MENU_CHANNEL, "", llGetOwner(), "");
        OWNER_INFO="owneruuid=" + (string)llGetOwner() + "&ownername=" + llEscapeURL(llKey2Name(llGetOwner()));
       
    }
    
    touch_start(integer total_number)
    {
        if (llDetectedKey(0) == llGetOwner()) {
           /* llOwnerSay("Listing sites");
            llSetTimerEvent(1);
          
            if (llGetListLength(sites)==0){
                  debug(llList2CSV(sites));
                string body = OWNER_INFO + "&template=" + TEMPLATE + "&type=" + "list_sites" + "&password=" + AVATAR_CLASSROOM_PASSWORD;
                http_id = llHTTPRequest(API_URL,HTTP_VARS, body);
            }
            else{
                llListen(MENU_CHANNEL+1, "", llGetOwner(), "");
                llDialog(llGetOwner(), "Please choose a command: ",GENERAL_OPTIONS, MENU_CHANNEL+1);
            }
            */
             string body = OWNER_INFO + "&template=" + TEMPLATE + "&type=" + "list_sites" + "&password=" + AVATAR_CLASSROOM_PASSWORD;
            http_id = llHTTPRequest(API_URL,HTTP_VARS, body);
        }
    }//touch
    

 http_response(key request_id, integer status, list metadata, string body)
    {
        llSetTimerEvent(0);
        hoverText="";
        counter=0;
        llSetText("", YELLOW, 1);
        list lines =llParseStringKeepNulls( body, ["\n"], [] );
        integer statusLine = (integer)llList2String(lines, 0);
        //confirm_id is when an http request was made to destroy the site
        if (request_id==confirm_id){
            playSound((string)statusLine);
            debug("destroy result:"+body);
            if ((integer)statusLine==(integer)20301) { 
                llDialog(llGetOwner(), "Site Removed!", ["Create"], MENU_CHANNEL);
            }
            else
            if ((integer)status==(integer)DESTROY_SITE_FAILED) llDialog(llGetOwner(), "Error Site Removal failed", ["List Sites"], MENU_CHANNEL);else
            if ((integer)status==(integer)DESTROY_SITE_FAILED_SITE_NOT_FOUND) llDialog(llGetOwner(), "Error: Tried to remove site, but it was note found on our servers", ["List Sites"], MENU_CHANNEL);
            return;
        }else
        //change pass
         if (request_id==change_pass_id){
                if ((integer)statusLine==(integer)20301) {
                string password= llList2String(lines,1);
                llDialog(llGetOwner(), "Password Reset!\nNew Password: "+password, GENERAL_OPTIONS, MENU_CHANNEL+1);
                }
         }else
        //this is the return from trying to create a site
        if (request_id==create_id){
            if ((integer)statusLine==(integer)20201) {
                string sitedataline = llList2String(lines,1);
                list sitedata = llParseStringKeepNulls(sitedataline,["|"],[]);
                sloodleserverroot=llList2String(sitedata,6);
                string sitename= llList2String(sitedata,1);
                string user= llList2String(sitedata,8);
                string pass= llList2String(sitedata,9);
                sites=[0,sloodleserverroot,sitename,user,pass];
                llListen(MENU_CHANNEL+1, "", llGetOwner(), "");
                llDialog(llGetOwner(), "Site Created!\nLogin with user: "+user+"\nPassword:"+pass, ["Ok"], MENU_CHANNEL+1);
                playSound((string)statusLine);
                debug("status is: "+(string)statusLine+"\n"+body);
                debug("pass is: "+(string)pass);
                debug("sites is: "+(string)llList2CSV(sites));
                return;
            }
        }else
        //this is the return for listing a site
        if (request_id == http_id) {
            debug("returned:"+body);
            if (statusLine<0) {
                playSound((string)statusLine);
            }
            else
            if (statusLine > 0) {
                    playSound((string)statusLine);
                    if (statusLine == (integer)20101) {
                        llDialog(llGetOwner(), "An Avatar Classroom currently does not exist for  "+llKey2Name(llGetOwner())+"\nWould you like use to create one for you?", ["Create"], MENU_CHANNEL);
                    }
                      else  {
                          playSound((string)statusLine);
                        integer i; 
                        string siteStr;
                        siteBtns=[];
                        sites=[];
                        for(i=1;i<llGetListLength(lines);i++) {
                            //llOwnerSay(llList2String(lines,i));
                            string sitedataline = llList2String(lines,1);
                            list sitedata = llParseStringKeepNulls(sitedataline,["|"],[]);
                            sloodleserverroot=llList2String(sitedata,6);
                            string sitename= llList2String(sitedata,1);
                            string user= llList2String(sitedata,8);
                            string pass= llList2String(sitedata,9);
                            sites+=[i,sloodleserverroot,sitename,user,pass];
                            siteStr+="Site "+(string)i+"\n";
                            siteBtns+="Site "+(string)i;                              
                        }
                        if (llGetListLength(sites)/4==1){
                              llListen(MENU_CHANNEL+1, "", llGetOwner(), ""); 
                              counter=0;
                              llSetTimerEvent(1);
                        }
                      }//statusLine else
            }//statusLine
            }//requestid
        }//http
        listen(integer chan, string name, key id, string str) {
            if (chan==MENU_CHANNEL){
                //site buttons
                if (llListFindList(siteBtns, [str])!=-1){
                    integer siteIndex =(integer) llGetSubString(str, 5, llStringLength(str)-1)-1;
                    llListen(MENU_CHANNEL+siteIndex+1, "", llGetOwner(), ""); 
                    debug(llList2CSV(sites));
                    llDialog(id, "You have selected site: "+llList2String(sites,siteIndex*5+2), GENERAL_OPTIONS, MENU_CHANNEL+siteIndex+1);
                }else
                if (str=="Create"){
                    llSetTimerEvent(0.25);
                    string body = OWNER_INFO + "&template=" + TEMPLATE + "&type=" + "create_site" + "&password=" + AVATAR_CLASSROOM_PASSWORD;
                    create_id = llHTTPRequest(API_URL, HTTP_VARS, body);
                }
            }else
            if (chan>MENU_CHANNEL&&chan<=(MENU_CHANNEL+(llGetListLength(siteBtns)))){
                integer siteIndex = chan-MENU_CHANNEL-1;                                                     
                if (str=="Confirm"){
                    llSetTimerEvent(0.25);
                        string body = "owneruuid=" + (string)llGetOwner()  +"&ownername="+llList2String(sites,siteIndex*5+2)+ "&template=" + TEMPLATE +"&sitename="+llList2String(sites,siteIndex*5+2)+ "&type=" + "destroy_site" + "&password=" + AVATAR_CLASSROOM_PASSWORD;
                        confirm_id = llHTTPRequest(API_URL,HTTP_VARS, body);
                        debug(API_URL+"?"+body);
                }
            }
        }
        object_rez(key id) {
         state done;
        }
        timer() {
            llMessageLinked(LINK_SET, 1, "p"+(string)counter++,NULL_KEY);
            if (counter>9){
                counter=0;
                llSetTimerEvent(0);
                llRezAtRoot(CLASSROOM_NAME, llGetPos()+<0,0,2.17>, ZERO_VECTOR, ZERO_ROTATION, 1);
                llMessageLinked(LINK_SET, -99, "PARTICLES", NULL_KEY);
            }
            
        
        }
        
    
   
}//state

state done{
    on_rez(integer start_param) {
        llResetScript();
    }
    
    touch_start(integer num_detected) {
        counter=0;
        llSetTimerEvent(1);
    }
        timer() {
            llMessageLinked(LINK_SET, 1, "p"+(string)(9-counter++),NULL_KEY);
            if (counter>9){                
                llSetTimerEvent(0);
                counter=0;
                state default;
            }
        }    
}

