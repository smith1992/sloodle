// 0.72 reset when notecard is changed, to auto reload Moodle and chatroom data. - DL
// 0.7 added?
//0.6 changes - changed the /SLURL to /slurl to avoid clashes with other gestures. - PA

//----------
// Declare vars w/out values

string URL; // this will be constructed out of URL_BASE, CHAT_ID, USER_ID, and some other hard coding
string CHAT_ID = "";

string sloodleserverroot = "";
string pwd = "";
integer sloodle_courseid = 0;

list chatroomids;
list chatroomnames;

//----------
// For hardcoding purposes/debugging
// string MOODLE_NAME = "SL Chat Bot";
// string URL_BASE = "http://www.sloodle.com/";
// string URL = "http://www.sloodle.com/SL_insert.php?chat_id=6&user_id=158";
// string CHAT_ID = "6";
// string USER_ID = "158";

//----------
//SLURL maker variables
vector Where;
string Name;
string SLURL;
integer X;
integer Y;
integer Z;

//-----------
//SLoodle chat variables
list menu1=["START"];
list menu2=["STOP","Continue"];
list menu_other=["Accept","Cancel"];
list unique_names;
list keys;
integer listenID;
integer part;
integer active;
integer CHANNEL = -67999;
string text;
string COL_START = "";
string COL_END = "";
string CODE_END = "";
integer total_len = 0;

key httprequest;
integer message_id = 0; // last message cc'd from moodle

sloodle_handle_command(string str) 
{
    //llWhisper(0,"handling command "+str);    
    list bits = llParseString2List(str,["|"],[]);
        string name = llList2String(bits,0);
        string value = llList2String(bits,1);
        if (name == "set:sloodleserverroot") {
            sloodleserverroot = value;
        } else if (name == "set:pwd") {
            pwd = value;
            if (llGetListLength(bits) == 3) {
                pwd = pwd + "|" + llList2String(bits,2);
            }
        } else if (name == "set:sloodle_courseid") {
            sloodle_courseid = (integer)value;
        }
    

    //llWhisper(0,"DEBUG: "+sloodleserverroot+"/"+pwd+"/"+(string)sloodle_courseid);

    if ( (sloodleserverroot != "") && (pwd != "") && (sloodle_courseid != 0) ) {
        state default;
    }
}

sloodle_init()
{
    //llWhisper(0,"initializing");    
    if ( (sloodleserverroot == "") || (pwd == "") || (sloodle_courseid == 0) ) {
        state sloodle_wait_for_configuration;
    }
}



default
{
    on_rez(integer param)
    {
        sloodle_init();
    }    
    state_entry()
    {     
        sloodle_init();

        llSetTimerEvent(0); // clear timer in case
        llSetTexture("059eb6eb-9eef-c1b5-7e95-a4c6b3e5ed9a",ALL_SIDES);
        unique_names = [];
        part = 0;
        llSetText("",<1,1,1>,1);
    }
        
    touch_start(integer total_number)   {
        if (CHAT_ID == "") {
            state select_chatroom;
        }
        if (llDetectedKey(0) == llGetOwner() )  {
            llListenRemove(listenID);
            listenID = llListen(CHANNEL,"",llGetOwner(),"");
            llDialog(llGetOwner(),"\nSelect colour codes to use in log,\nor START to start recording.",menu1,CHANNEL);
            llSetTimerEvent(10);
        }
    }
    
    listen(integer channel, string name, key id, string message)    {
        //llOwnerSay(message);
        if (message == "START") {
            llSay(0,"Chat logging is on!");
            llSay(0,"Touch the chat logger to add yourself to the log");
            llSetText("Chat logging is on!",<0,0,0>,1.0);
            llMessageLinked(LINK_THIS,part,"START",NULL_KEY);
            llSleep(0.1);
            llSetTimerEvent(0);
            state logging;
        }
    }

    timer() {
        llSetTimerEvent(0);
        llListenRemove(listenID);
        llOwnerSay("Dialog has timed out. Touch logger again to use.");
    }
    
}

state logging   {
    on_rez(integer param)   {
        // goto state default - TO FINISH
        llOwnerSay("chat logging off");
        state default;
    }
    
    state_entry()   {
        llSetTexture("d3c9180a-1703-3a84-8dcd-e3aa6306a343",ALL_SIDES);
        listenID = llListen(0,"",NULL_KEY,"");
        llListen(CHANNEL,"",NULL_KEY,"");  // listen for commands
        keys = [llGetOwner()];
        unique_names = [llKey2Name(llGetOwner())];
        text = "Recording: " + llList2String(unique_names,0);
        llSetText(text, <1,0.2,0.2>,1);
        total_len = 0;
        llSetTimerEvent(12);
    }
    
    touch_start(integer total_number)   {
        integer i;
        
        for (i=0; i < total_number; i++)    {

            if (llDetectedKey(i) == llGetOwner())  {
                llDialog(llGetOwner(),"\nStop logging?",menu2,CHANNEL);
            }
            else    {
                // Add name of avatar touching to the list
                llDialog(llDetectedKey(i),"\nMay I record your chat?",menu_other,CHANNEL);
            }
        }
    }
    
    listen(integer channel, string name, key id, string message)    {

        if (llGetOwnerKey(id) != id)    { // only true for avatars! Will ignore all object chat
            //llOwnerSay("Attempted spoofing");
            return;
        }
        
        if (channel == CHANNEL)     {
            if (message == "STOP" && id == llGetOwner() )   {    
                llSay(0,"Chat logging is now off!");
                llMessageLinked(LINK_THIS,part,"SEND",NULL_KEY);
                state default;
            }
            // double check that this message is genuinely from avatar not spoofed
            if (message == "Accept" && name == llKey2Name(id) )     {
                llSetTimerEvent(10);
                
                if(llListFindList(unique_names,[name]) == -1)    { 
                    unique_names += (unique_names=[]) + unique_names + name; // hack for faster code on wiki
                    keys += (keys=[]) + keys + id;
                    llSay(0,"Now recording " + name);
                    text = text + "\n " + name;
                    llSetText(text, <1,0.2,0.2>,1);
                }
            }
        }
        else    {
            integer i;
            string speech;
            i = llListFindList(unique_names,[name]  );
            
            if (i != -1)   {
/////////////SLURL MAKER
                if(message == "/slurl")     {        
                    Name = llGetRegionName();
                    Where = llGetPos();
                    X = (integer)Where.x;
                    Y = (integer)Where.y;
                    Z = (integer)Where.z;
                    // I don't replace any spaces in Name with %20 and so forth.
                    SLURL = "http://slurl.com/secondlife/" + Name + "/" + (string)X + "/" + (string)Y + "/" + (string)Z + "/?title=" + Name;
                    message = SLURL;                
                }
///////////////SLURL MAKER  
                //URL = URL_BASE+"/mod/sloodle/mod/chat/sl_user_chat_linker.php.php?chat_id="+CHAT_ID+"&pwd+"+pwd;                  
                httprequest = llHTTPRequest(sloodleserverroot+"/mod/sloodle/mod/chat/sl_user_chat_linker.php?chat_id="+CHAT_ID+"&pwd="+pwd+"&avname="+llEscapeURL(name)+"&chat_message=(SL)"+llEscapeURL(" " +name +": "+ message),[HTTP_METHOD,"GET"],"");
                // llSay(0, httprequest); // DEBUG PURPOSES
            }   
        }
    }
    
    timer()     {
        httprequest = llHTTPRequest(sloodleserverroot+"/mod/sloodle/mod/chat/sl_user_chat_linker.php?chat_id="+CHAT_ID+"&pwd="+pwd,[HTTP_METHOD,"GET"],"");
        // llSay(0, httprequest); // DEBUG PURPOSES
        // llSay(0, URL); // DEBUG PURPOSES
        // FINDINGS:  the timer is working, the request is being properly constructed, and the SLoodle server does send back the proper info from the PHP script. Look further below...
    }
    
    http_response(key id,integer status, list meta, string body)
    {
        if (httprequest == id)
        {
            if (llStringLength(body) == 0)
                return;
            list message_list = llParseString2List(body,["Line: "],[]);
            integer i= llGetListLength(message_list);

            string text;
            string line;
            integer lno;
                          
            while ( i > 0 ) //I did this kind of back to front, becuase this is the result of hackery
                            // writing from scratch Id use a for loop, but this is kind of the way
                            // it is.
            {
                i--;
                text = llList2String(message_list,i);
                line = llGetSubString(text,0,4);
                lno = (integer)line;
                if ( lno > message_id && llSubStringIndex(text,"(SL)") == -1)
                    llSay(0,llGetSubString(text,5,-1));
                }
            message_id = lno;
        }
    }
}

state select_chatroom
{
    state_entry() {
        if (sloodle_courseid == 0) {
            state sloodle_wait_for_configuration;
        } else {
            // fetch list of chatrooms
            httprequest = llHTTPRequest(sloodleserverroot+"/mod/sloodle/mod/chat/sl_user_chat_linker.php?courseid="+(string)sloodle_courseid+"&pwd="+pwd,[HTTP_METHOD,"GET"],"");

        }
    }
    http_response(key request_id, integer status, list metadata, string body) {
        if(status == 200) {
            if (request_id == httprequest) {        
                chatroomids = [];
                chatroomnames = [];
               
                list lines = llParseString2List(body,["\n"],[]);  
                    
                integer i;
                for (i=0; i<llGetListLength(lines); i++) {  
                    string thislinestr = llList2String(lines, i);      
                    list thisline = llParseString2List(thislinestr,["|"],[]);            
                    if (llList2String(thisline, 0) == "ERROR") {
                        llWhisper(0, thislinestr);
                    } else {
                        chatroomids = chatroomids + [(integer)llList2String(thisline, 1)];
                        chatroomnames = chatroomnames + [llList2String(thisline, 2)];
                        
                    }
                }

            }
        }
        integer chatroomcount = 0;
        list crmenu = ["Cancel"];
        string crmenustring = "";
        for (chatroomcount = 1; chatroomcount <= llGetListLength(chatroomnames); chatroomcount++) {
            integer crindex = chatroomcount - 1;
            crmenu = crmenu + [(string)chatroomcount];
            crmenustring = crmenustring + "\n"+(string)chatroomcount+": "+llList2String(chatroomnames,crindex);
        }
        listenID = llListen(CHANNEL,"",llGetOwner(),"");
        llDialog(llGetOwner(),"\nChoose your chatroom:\n"+crmenustring,crmenu,CHANNEL);        
    } 
    listen(integer lchannel, string name, key id, string message) {

        if (lchannel == CHANNEL) {
            if (message == "Cancel") {
                state default;
            }
            integer choicenum = (integer)message;
            integer choiceindex = choicenum - 1;
            CHAT_ID = (string)llList2Integer(chatroomids,choiceindex);
            llWhisper(0,"Using chatroom "+CHAT_ID);
            state default;
        }
    }    
}

state sloodle_wait_for_configuration
{
    state_entry() {
        //llWhisper(0,"waiting for command");
    }
    link_message(integer sender_num, integer num, string str, key id) {
        //llWhisper(0,"got message "+(string)sender_num+str);
       // if ( (sender_num == LINK_THIS) && (num == sloodle_command_channel) ){
            sloodle_handle_command(str);
        //}   
    }
}

