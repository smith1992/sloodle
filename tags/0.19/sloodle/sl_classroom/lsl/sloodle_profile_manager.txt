// SL Classroom Creator
// Copyright Edmund Edgar, 2006-12-23

// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

string sloodleserverroot = ""; //"http://moodle.edochan.com";
string pwd = "";
string pwdcode = "";

integer object_dialog_channel = -3857343;
integer object_creator_channel = -3857361;

//string sloodleprofilebase = "/mod/sloodle/sl_classroom/sl_profile.php";
string sloodleprofilebase = "/mod/sloodle/course/sl_profile.php";

integer avatar_dialog_channel = 3857362;
integer SLOODLE_CHANNEL_AVATAR_SETTING = 1;
integer SLOODLE_CHANNEL_AVATAR_IGNORE = -1639279999;
integer SLOODLE_CHANNEL_OBJECT_PROFILE_SAVER_DO_SAVE = -1639270012;
integer SLOODLE_CHANNEL_OBJECT_INVENTORY_VENDOR_DO_CLEANUP_ALL = -1639270022;

integer SLOODLE_RESTRICT_TO_OWNER = 1;

key http_id; 
integer listen_id;

string toucheravname;
key toucheruuid = NULL_KEY;

string toucherurl = "";

integer sloodle_courseid = 0;

integer is_ready = 0;

string object_state = "";

list objectprofileids;
list objectprofilenames;

integer objectbeingrezzedindex;
list objectnames;
list objectuuids;
list objectrelativepositions;
list objectentryids;
integer objectsallrezzed = 0;

integer objectprofileid = 0;
string objectprofilename = "";

list savemeuuids;
list savemenames;
list savemepos;

list ignoremeuuids;
list ignoremenames;

sloodle_debug(string msg)
{
    //llWhisper(0,msg);
}

sloodle_tell_other_scripts(string msg)
{
    sloodle_debug("sending message to other scripts: "+msg);
    llMessageLinked(LINK_SET, object_dialog_channel, msg, NULL_KEY);   
}

// Controlling objects
object_command(key uuid, string msg) {
    // TODO: say or shout or whatever depending on distance
    llSay(object_dialog_channel, (string)uuid+"|"+msg);    
    sloodle_debug("COMMAND SENT:"+(string)uuid+":"+msg);
}

// Controlling objects
single_object_command(key uuid, string msg, integer channel) {
    // TODO: say or shout or whatever depending on distance
    llSay(object_dialog_channel, (string)uuid+"|"+msg);    
    sloodle_debug("COMMAND SENT:"+(string)uuid+":"+msg);
}

request_course_profiles() 
{
    sloodle_debug("Fetching data for course "+(string)sloodle_courseid);
    string url = sloodleserverroot + sloodleprofilebase + "?cmd=listprofiles&pwd=" + pwd;
    url = url+"&avname="+llEscapeURL(toucheravname)+"&uuid="+(string)toucheruuid+"&courseid="+(string)sloodle_courseid;
    http_id = llHTTPRequest(url,[],"");
}

handle_course_profile_response(string body)
{
    
    //sloodle_debug("course_profile_response:"+body);

    list lines = llParseString2List(body,["\n"],[]);
    string firstline = llList2String(lines,0);
    list data = llParseString2List(firstline,["|"],[]);                
    string resultCode = llList2String(data,0);
          
        if(resultCode == "ERROR") {
            llWhisper(0,"Sorry, I tried to get some data out of Moodle but it didn't work out...");
            integer i;
            for (i=1;i<llGetListLength(data);i++) {                
                sloodle_debug(":" + llList2String(data,i) + ":" + (string)i);   
            }
        } else {            
        
            objectprofileids = [];
            objectprofilenames = [];
            // objectprofilecounts = [];
                        
            integer i;
            for (i=0;i<llGetListLength(lines);i++) {
                string curline = llList2String(lines,i); 
                data = llParseString2List(curline,["|"],[]); 
                objectprofileids = objectprofileids + [llList2Integer(data,1)];
                objectprofilenames = objectprofilenames + [llList2String(data,2)];
                // objectprofilecounts = objectprofilecounts + [llList2String(data,3)];
            }
                            
            sloodle_debug("Loaded profiles");
            
            offer_profile_select();                                                                                     
        }           
      
}

offer_profile_select()
{
    object_state = "offer_profile_select";
    listen_id = llListen(avatar_dialog_channel, "", toucheruuid, "");       
    llDialog(toucheruuid, "Choose your profile", objectprofilenames, avatar_dialog_channel);
}

sloodle_handle_command(string str) 
{
    //llWhisper(0,"handling command "+str);    

    sloodle_debug("classroom creator handing command "+str);
    list bits = llParseString2List(str,["|"],[]);
    string name = llList2String(bits,0);
    string value = llList2String(bits,1);
    if (name == "set:sloodleserverroot") {
        sloodleserverroot = value;
    } else if (name == "set:pwd") {
        pwd = value;
        if (llGetListLength(bits) == 3) {
            pwdcode = llList2String(bits,2);
            pwd = pwd + "|" + pwdcode;
        }
    } else if (name == "set:sloodle_courseid") {
        sloodle_courseid = (integer)value;
    } else if (name == "set:toucheruuid") {
        toucheruuid = (key)value;            
    } else if (name == "do:reset") {
        llResetScript(); 
    }

    if ( (sloodleserverroot != "") && (pwd != "") && (sloodle_courseid != 0)  && (toucheruuid != NULL_KEY) ) {
        sloodle_debug("ready");
        is_ready = 1;
    }
}

integer handle_profile_entry_reponse(string body)
{
    
    sloodle_debug("Got course settings"+body);                    
    list lines = llParseString2List(body,["\n"],[]);
    string firstline = llList2String(lines,0);
    list data = llParseString2List(firstline,["|"],[]);                
    string resultCode = llList2String(data,0);       

    if(resultCode == "ERROR") {
        llWhisper(0,"Sorry, I tried to get some data out of Moodle but it didn't work out...");
        integer i;
        for (i=1;i<llGetListLength(data);i++) {            
            sloodle_debug(":" + llList2String(data,i) + ":" + (string)i);   
        }
        
        return 0;
        
    } else {
    // TODO: Populate objects...
        objectbeingrezzedindex = 0;
                    
        objectentryids = [];
        objectnames = [];         
        objectuuids = [];
        objectrelativepositions = [];
        
        sloodle_debug("ready to populate objects");
        
        integer i;
        for (i=0;i<llGetListLength(lines);i++) {
            string curline = llList2String(lines,i);
            data = llParseString2List(curline,["|"],[]);
                        
            // we'll fill in objectuuids when we rez the objets
            objectentryids = objectentryids + [llList2Integer(data,1)];
            objectnames = objectnames + [llList2String(data,2)];
            objectrelativepositions = objectrelativepositions + [(vector)llList2String(data,3)];                                          
        }

        return 1;                             
                    
    }    
}

rez_all_objects()
{
    
    objectbeingrezzedindex = -1;
    rez_next_object(); // rezzing the following object will be called by the object_rez event 

}

// rez the next object in the list, return 1 if it rezzes something, 0 if there's othing left to rez
// TODO: Set a timer to deal with if the object fails to rez...
integer rez_next_object()
{
    objectbeingrezzedindex++;
    if (llGetListLength(objectnames) > objectbeingrezzedindex) {
        sloodle_debug("Rezzing object "+llList2String(objectnames,objectbeingrezzedindex));
        llMessageLinked(LINK_SET, object_creator_channel, "do:rez|"+llList2String(objectnames,objectbeingrezzedindex)+"|"+(string)llList2Vector(objectrelativepositions,objectbeingrezzedindex),NULL_KEY );
        // TODO: Check for success...
        llSleep(2);
        rez_next_object();
    }
    objectsallrezzed = 1;
    return 0;
}

fetch_profile_entry_data()
{
    sloodle_debug("Fetching data for profileid "+(string)objectprofileid);        
    string url = sloodleserverroot + sloodleprofilebase + "?cmd=entries&pwd=" + pwd;
    url = url+"&avname="+llEscapeURL(toucheravname)+"&uuid="+(string)toucheruuid+"&profileid="+(string)objectprofileid+"&courseid="+(string)sloodle_courseid;
    // llWhisper(0,"Requesting login URL for "+llDetectedName(0));
    http_id = llHTTPRequest(url,[],"");
}

integer handle_profile_selection(string message) 
{
    integer i;
    sloodle_debug("handling profile selection "+message);
    for (i=0;i<llGetListLength(objectprofileids);i++) {
        if (message == llList2String(objectprofilenames,i)) {
            objectprofileid = llList2Integer(objectprofileids,i);
            
            // Cleanup the ones we didn't choose
            objectprofileids = [];
            objectprofilenames = [];
            
            return 1;
        }
    }
    return 0;
}

integer display_menu() // return listen_id if waiting for a response, 0  if not
{
        
    object_state = "display_menu";

    if ( (sloodleserverroot == "") || (pwd == "") ) {
        sloodle_debug("Waiting for configuration");
        is_ready = 0;
        llDialog(toucheruuid, "Can't setup any classes yet - server and course aren't set yet.\nUse the control panel next to me to set the server and course, then click me again to rez an object.", [], avatar_dialog_channel);
        return 0;
    } else {
        is_ready = 1;
    } 
        
    list menu_options = [];
    if ( objectsallrezzed == 1) {
        sloodle_debug("all objects rezzed - showning menu");
        if (objectprofileid > 0) {
            menu_options = ["Cleanup", "Save", "Save As","Cancel"]; 
        } else {
            menu_options = ["Cleanup", "Save As","Cancel"];
        }  
        sloodle_debug("showing menu to toucher "+(string)toucheruuid);
        llDialog(toucheruuid, "Menu Options", menu_options, avatar_dialog_channel);
        listen_id = llListen(avatar_dialog_channel, "", toucheruuid, "");            
        return listen_id;
    } else {
        // get profiles
        sloodle_debug("getting course profiles");
        object_state = "request_course_profiles";
        request_course_profiles();
        return 0;
    }

}

integer handle_new_profile_reponse(string body)
{
    list data = llParseString2List(body,["|"],[]); 
    if (llList2String(data,0) == "OK") {
        objectprofileid = llList2Integer(data,1);
        objectprofilename = llList2String(data,2);        
        return 1;
    } else {        
        sloodle_debug(llList2String(data,1));
        return 0;
    }
}

integer handle_touch(key thistoucher) 
{

    if (toucheruuid != NULL_KEY) {
        if ( (SLOODLE_RESTRICT_TO_OWNER == 1) || (thistoucher != toucheruuid) ) {
            if (thistoucher != llGetOwner()) {
                if (SLOODLE_RESTRICT_TO_OWNER == 1) {
                    llDialog(thistoucher,"This object can only be used by its owner.",["OK"],SLOODLE_CHANNEL_AVATAR_IGNORE);
                } else {
                    //llSay(0,llKey2Name(thistoucher)+", this object is currently in use by "+llKey2Name(toucheruuid)+".");   
                    llDialog(thistoucher,"This object can only be used by its owner.",["OK"],SLOODLE_CHANNEL_AVATAR_IGNORE); 
                }
                return 0;
            }
        }
    }
    toucheruuid = thistoucher;
    toucheravname = llKey2Name(toucheruuid);
    return 1;
}

default 
{
    touch_start(integer total_number)
    {
        if (handle_touch(llDetectedKey(0))) {        
            display_menu();
        }
    }
    link_message(integer sender_num, integer num, string str, key id) {
        sloodle_debug("got message "+(string)sender_num+":"+str);
        if (num == object_dialog_channel) {
            sloodle_handle_command(str);
        }   
    } 
    listen( integer channel, string name, key id, string message ) 
    {
        if (channel == avatar_dialog_channel) {

            sloodle_debug("object state is "+object_state);
            if (object_state == "offer_profile_select") {
                if (handle_profile_selection(message) == 1) {
                    fetch_profile_entry_data();
                    object_state = "fetch_profile_entry_data";                    
                }
            } else {

                //llWhisper(0,"message was "+message);
                if (message == "Save") {
                    sloodle_debug("sending save message");       
                    string baseurl = sloodleserverroot+sloodleprofilebase+"?pwd="+pwd+"&cmd=addentries&profileid="+(string)objectprofileid+"&avname="+toucheravname+"&uuid="+(string)toucheruuid;
                    llMessageLinked(LINK_THIS, SLOODLE_CHANNEL_OBJECT_PROFILE_SAVER_DO_SAVE, baseurl, NULL_KEY);   // send a message to the saving script
                } else if (message == "Save As") {
                   object_state = "new_profile";
                   sloodle_debug("sae as set ojet state to "+object_state);
                   llDialog(toucheruuid,"Type /"+(string)SLOODLE_CHANNEL_AVATAR_SETTING+", followed by the name of your new profile, eg.\n/"+(string)SLOODLE_CHANNEL_AVATAR_SETTING+" My profile",[],SLOODLE_CHANNEL_AVATAR_IGNORE);
                    listen_id = llListen(SLOODLE_CHANNEL_AVATAR_SETTING, "", toucheruuid, "");
                    
                } else if (message == "Cleanup") {
                    llMessageLinked(LINK_ALL_OTHERS, SLOODLE_CHANNEL_OBJECT_INVENTORY_VENDOR_DO_CLEANUP_ALL,"do:cleanup_all",NULL_KEY);
                    objectsallrezzed = 0;              
                }  else {
                    sloodle_debug("message state not recognized "+message);
                }
              
            }
        } else if (channel == SLOODLE_CHANNEL_AVATAR_SETTING) {
            if (object_state == "new_profile") {
                sloodle_debug("Saving profile "+message);
                string url = sloodleserverroot+sloodleprofilebase+"?pwd="+pwd+"&cmd=new&name="+llEscapeURL(message)+"&courseid="+(string)sloodle_courseid+"&avname="+toucheravname+"&uuid="+(string)toucheruuid;        
                sloodle_debug("new profile:"+url);
                http_id = llHTTPRequest(url,[],"");
                llListenRemove(listen_id);
            }            
        } else {
            sloodle_debug("ignoring message "+message);
        }
    }    
     
    http_response(key request_id, integer status, list metadata, string body) {
        if(status == 200) {
            if (request_id == http_id) {
                if (object_state == "request_course_profiles") {
                    handle_course_profile_response(body);    
                } else if (object_state == "fetch_profile_entry_data") {
                    if (handle_profile_entry_reponse(body) == 1) {
                        rez_all_objects();
                    } else {
                        sloodle_debug("handling profile entry reponse failed");
                    }
                } else if (object_state == "new_profile") {
                    integer ok = handle_new_profile_reponse(body);
                    if (ok == 1) {
                        sloodle_debug("sending save message");       
                        string baseurl = sloodleserverroot+sloodleprofilebase+"?pwd="+pwd+"&cmd=addentries&profileid="+(string)objectprofileid+"&avname="+toucheravname+"&uuid="+(string)toucheruuid;
                        llMessageLinked(LINK_THIS, SLOODLE_CHANNEL_OBJECT_PROFILE_SAVER_DO_SAVE, baseurl, NULL_KEY); 
                    } else {
                        llWhisper(0,"Failed, please try again");
                        listen_id = llListen(0, "", toucheruuid, "");
                    }                    
                } else {
                    sloodle_debug("ignoring an http response arriving with an unknown object state "+object_state);
                }         
            }
        }
    } 
}

