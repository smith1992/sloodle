// A place to remember the ID for the latest http request we made, so the callback doesn't process out-of-order responses
key http_id; 
// Test pattern - Used as default video texture when one is missing in parcel media
key VIDEO_DEFAULT = "6e0f05ad-1809-4edc-df29-fae3d2a6c9b8";  
// Set the texture to the jpeg provided by url

string moodleinstall = "SLOODLE_SCRIPT_URL_WITH_PASSWORD";

seturl(string url) 
{
    key video_texture = llList2Key(llParcelMediaQuery( [PARCEL_MEDIA_COMMAND_TEXTURE]), 0);
    if(video_texture == NULL_KEY)
    {
        video_texture = VIDEO_DEFAULT;
        llParcelMediaCommandList([PARCEL_MEDIA_COMMAND_TEXTURE, VIDEO_DEFAULT]);
    }
    llSetTexture(video_texture,ALL_SIDES);
    llParcelMediaCommandList([PARCEL_MEDIA_COMMAND_URL,url]);
    llParcelMediaCommandList([PARCEL_MEDIA_COMMAND_PLAY]);
    llParcelMediaCommandList([PARCEL_MEDIA_COMMAND_AUTO_ALIGN,TRUE]);
}
default
{
    state_entry()
    {
        // set a default jpeg
        //seturl("http://sl.edochan.com/moodle/moodle/theme/formal_white/logo.jpg");
        // start listening for nearby speech
        llListen(1,"",NULL_KEY,"");
        // start sensing nearby agents once a minute
        //llSensorRepeat("",NULL_KEY,AGENT,10,10,60);
    }
    listen(integer channel, string name, key id, string message)
    {
    }
    touch_start(integer total_number)
    {
        // ask the server for a jpeg appropriate to the agent who touched us
        string url = 
moodleinstall+"&req=userinfo&avatarname="+llEscapeURL(llDetectedName(0))+"&avataruuid="+(string)llDetectedKey(0);
        llWhisper(0,"Looking up user info for "+llDetectedName(0));
        llParcelMediaCommandList([PARCEL_MEDIA_COMMAND_STOP]);
        http_id = llHTTPRequest(url,[],"");
    }
    http_response(key request_id, integer status, list metadata, string body) {
        // make sure we're processing a response we care about
        if(request_id == http_id) {
            // only on request success
            if(status == 200) {
                // data is coming back as pipe-delimited
                list data = llParseString2List(body,["|"],[]);
                // url is the first field
                string resultCode = llList2String(data,0);
                if(resultCode == "ERROR") {
                    llWhisper(0,"Sorry, I tried to get some data out of Moodle but it didn't work out...");
                    integer i;
                    for (i=1;i<llGetListLength(data);i++) {
                        llWhisper(0,llList2String(data,i));   
                    }
                } else {
                    string firstname = llList2String(data,1);
                    string lastname = llList2String(data,2);
                    string picture = llList2String(data,3);
                    
                    llWhisper(0,"Showing a picture for "+firstname+" "+lastname);     
                    llWhisper(0,"The picture should come from "+picture);     

                    seturl(picture);

                 }
            }
        } 
    }
}
